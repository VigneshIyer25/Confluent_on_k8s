# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tracker_pb2 as tracker__pb2


class TrackerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVehicles = channel.unary_unary(
                '/tracker.Tracker/GetVehicles',
                request_serializer=tracker__pb2.GetVehiclesRequest.SerializeToString,
                response_deserializer=tracker__pb2.GetVehiclesResponse.FromString,
                )
        self.StreamVehicleCoordinates = channel.unary_stream(
                '/tracker.Tracker/StreamVehicleCoordinates',
                request_serializer=tracker__pb2.StreamVehicleCoordinatesRequest.SerializeToString,
                response_deserializer=tracker__pb2.StreamVehicleCoordinatesResponse.FromString,
                )


class TrackerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetVehicles(self, request, context):
        """get list of vehicles to be tracked
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamVehicleCoordinates(self, request, context):
        """track a particular vehicle
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVehicles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVehicles,
                    request_deserializer=tracker__pb2.GetVehiclesRequest.FromString,
                    response_serializer=tracker__pb2.GetVehiclesResponse.SerializeToString,
            ),
            'StreamVehicleCoordinates': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamVehicleCoordinates,
                    request_deserializer=tracker__pb2.StreamVehicleCoordinatesRequest.FromString,
                    response_serializer=tracker__pb2.StreamVehicleCoordinatesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tracker.Tracker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Tracker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetVehicles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tracker.Tracker/GetVehicles',
            tracker__pb2.GetVehiclesRequest.SerializeToString,
            tracker__pb2.GetVehiclesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamVehicleCoordinates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tracker.Tracker/StreamVehicleCoordinates',
            tracker__pb2.StreamVehicleCoordinatesRequest.SerializeToString,
            tracker__pb2.StreamVehicleCoordinatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
